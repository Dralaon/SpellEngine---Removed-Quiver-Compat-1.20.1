plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.github.breadmoirai.github-release" version "2.4.1"
    id "com.modrinth.minotaur" version "2.4.4"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url 'https://maven.kosmx.dev/' }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://jitpack.io' }
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs"
        url = 'https://maven.ladysnake.org/releases'
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    // Dependencies
    modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:${project.player_anim_version}")
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    shadowCommon(implementation("com.github.ZsoltMolnarrr:TinyConfig:${project.tiny_config_version}"))
    include(implementation("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}"))
    modImplementation("dev.emi:trinkets:${project.trinkets_version}")

    modImplementation("maven.modrinth:spell-power:${project.spell_power_version}-fabric")
//    modImplementation(files("../fabric/run/mods/dev/spell_power-fabric-${project.spell_power_version}.jar"))

    // Compatibility
    modCompileOnly("com.terraformersmc:modmenu:${rootProject.mod_menu_version}") { transitive false }
    modImplementation("curse.maven:shoulder-surfing-reloaded-243190:${shoulder_surfing_file_id}")
    modCompileOnly("maven.modrinth:first-person-model:${project.fpm_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand(project.properties)
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
    relocate 'net.tinyconfig', 'net.spell_engine.tinyconfig'
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

if(project.hasProperty('release_type')) {
    tasks.register("publishMod") {
        dependsOn(build)
        finalizedBy(tasks.curseforge)
        finalizedBy(tasks.modrinth)
        finalizedBy(tasks.githubRelease)
    }

    curseforge {
        apiKey = System.getenv("CURSEFORGE_API_KEY")
        project {
            id = '807653'
            changelog = changelog_last_section()
            changelogType = 'markdown'
            releaseType = release_type
            addGameVersion "1.19.2"
            addGameVersion "Fabric"

            relations {
                requiredDependency 'fabric-api'
                requiredDependency 'cloth-config'
                requiredDependency 'playeranimator'
                requiredDependency 'spell-power'
                requiredDependency 'trinkets'
            }

            mainArtifact(remapJar)
            afterEvaluate {
                uploadTask.dependsOn(remapJar)
            }
            options {
                forgeGradleIntegration = false
            }
        }
    }

    modrinth {
        token = System.getenv("MODRINTH_API_KEY")
        projectId = "spell-engine" // This can be the project ID or the slug. Either will work!
        versionName = "${version}" // You don't need to set this manually. Will fail if Modrinth has this version already
        versionNumber = "${version}-fabric" // You don't need to set this manually. Will fail if Modrinth has this version already
        versionType = release_type // This is the default -- can also be `beta` or `alpha`
        uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
        gameVersions = ["1.19.2"] // Must be an array, even with only one version
        loaders = ["fabric"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
        dependencies { // A special DSL for creating dependencies
            // scope.type
            // The scope can be `required`, `optional`, `incompatible`, or `embedded`
            // The type can either be `project` or `version`
            required.project "fabric-api"
            required.project 'cloth-config'
            required.project 'playeranimator'
            required.project 'spell-power'
            required.project 'trinkets'
        }
    }

    githubRelease {
        token System.getenv("GH_API_KEY") // This is your personal access token with Repo permissions
        owner "ZsoltMolnarrr" // default is the last part of your group. Eg group: "com.github.breadmoirai" => owner: "breadmoirai"
        repo "SpellEngine" // by default this is set to your project name
        tagName "${version}" // by default this is set to "v${project.version}"
        targetCommitish "1.19.2" // by default this is set to "main"
        releaseName "Release" // Release title, by default this is the same as the tagName
        generateReleaseNotes false // Generate release notes automatically, if true and body is present, body will be pre-pended, if name is not given, one will be generated by the tag
        // body.set "" // by default this is empty
        draft false // by default this is true
        prerelease release_type != "release" // by default this is false
        // releaseAssets jar.destinationDir.listFiles // this points to which files you want to upload as assets with your release, by default this is empty
        allowUploadToExisting false // Setting this to true will allow this plugin to upload artifacts to a release if it found an existing one. If overwrite is set to true, this option is ignored.
        overwrite false // by default false; if set to true, will delete an existing release with the same tag and name
        // dryRun true // by default false; you can use this to see what actions would be taken without making a release
        apiEndpoint "https://api.github.com" // should only change for github enterprise users
        client // This is the okhttp client used for http requests
    }
}